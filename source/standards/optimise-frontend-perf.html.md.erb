---
title: How to optimise frontend performance
last_reviewed_on: 2022-01-24
review_in: 6 months
---

# <%= current_page.data.title %>

You should focus on [frontend performance][] when developing your service’s website. This will improve the user experience of your service by making your website respond faster and work better on all devices.

## Prioritise performance tasks

You can optimise your site’s frontend performance by prioritising tasks that will improve your site speed. Prioritise things you must do (high) over medium or low priority (nice to have) tasks.

For example:

|Priority|Example|Action
|---|---|---|
|#High|Position styles correctly|Set styles at the top of the page and `defer` scripts |
||Minimise HTTP requests|Minimise tiling icons, CSS and JavaScript files to reduce size and loading time [HTTP/1.1 only]|
||Compress static resources|Use minification, [Gzip][], and [Brotli][] to compress CSS and JavaScript code|
||Set correct Headers|Set correct [Cache-Control][] and [ETag][] headers on assets for optimal caching|
|#Medium|Look for empty image `src` attributes|Avoid using empty image `src` attributes as some browsers always send requests to them, resulting in additional traffic|
||Include `width` and `height` attributes on images to minimise layout thrashing | Make sure to include these attributes to improve visual stability and the [Cumulative Layout Shift (CLS)][] metric
||Minimise TCP connections |Use fewer third-party domains to reduce the number of DNS + TCP + SSL negotiations per page |
||Investigate [lazy loading][]|For pages with many images, only load images in the immediate browser viewport|
||Investigate the impact of loading [@font-face][] assets on perceived performance |Investigate the CSS `font-display` property for managing common issues like [FOUT, FOIT and FOFT][]|
|#Low|Set images and sprites correctly|Set images and sprites horizontally as it’s easier for browsers to parse|
||Reduce cookie size|Because every cookie is sent with each HTTP request, consider using a cookie-free domain for static assets [HTTP/1.1 only]. Enable HTTP/2 to enable [HPACK][] header compression or HTTP/3 for [QPACK][] |
||Investigate using a Content Delivery Network (CDN) | A CDN will improve site performance by using a network of servers to deliver resources to users. The user will get delivered resources from the server that is located nearest to the user. A CDN is well-suited to handling heavy traffic and traffic spikes.
||[AJAX][] requests using JSON|Avoid adding too much data to a JSON Object because this causes performance errors with parsing|
||Investigate using [WebSockets][]|Consider using WebSockets rather than [XMLHttpRequest][], because an HTTP request packet has 1,684 bytes of overhead, compared to 8 bytes for a WebSocket packet|
||Investigate using a service worker| Consider using a service worker for fine grain cache control of critical assets on users machines instead of transferring them over the network

## Automate optimisation

You can automate performance optimisation using tools such as:

- [Webpack][]
- [Parcel][]
- [Rollup][]
- [Gulp][]

You should integrate these tools into your [Continuous Delivery (CD) and Continuous Integration (CI) workflow][] so they automatically run before deployment.

Consider automating common tasks like:

- CSS and JS Linting and optimisation
- CSS and JS Minification
- image optimisation
- sprite and icon generation
- SVG Image optimisation

## Automate testing

You can automate frontend performance testing using third-party services such as:

- WebPagetest
- Google PageSpeed Insights
- SpeedCurve
- Sitespeed.io
- Calibreapp

## Using Speedcurve to automate frontend performance testing

You can use [Speedcurve][] to test the performance of your service.  

Speedcurve provides an extensive set of tools to test your service such as the following:

- Test from different locations and different browsers.
- Schedule regular tests using tools like Google Lighthouse and Webpage Test.
- [Real user monitoring][] which allows you to collect data that shows you how your real users experience the speed of your site. 

Contact the Head of Frontend or a Lead Frontend Developer to request an account.

## Performance budget

You should [set a performance budget][] for your website’s pages. Once you’ve set a performance budget, test to check your website’s pages stay within your budget. There are many tools available to do this, such as:

- Webpack performance
- performance-budget
- PSI - PageSpeed Insights with reporting
- Google Lighthouse

## Further reading

You can find out more about improving your website’s frontend performance by reading:

- [web.dev - Fast load times][]
- [Setting a performance budget][]
- [My performance audit workflow][]
- [Front-end performance for web designers and front-end developers][]
- [Improving web app performance with the Chrome DevTools Timeline and Profiles][]
- [Google Web Fundamentals: Optimizing Content Efficiency][]

The Service Manual has more suggestions about [how you can test frontend performance][].

[frontend performance]: https://www.gov.uk/service-manual/technology/how-to-test-frontend-performance
[minification]: https://web.dev/reduce-network-payloads-using-text-compression/
[Gzip]: https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/optimize-encoding-and-transfer#text_compression_with_gzip
[Cache-Control]: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control
[ETag]: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag
[lazy loading]: https://web.dev/fast/#lazy-load-images-and-video
[@font-face]: https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face
[FOUT, FOIT and FOFT]: https://css-tricks.com/fout-foit-foft/
[AJAX]: https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX/Getting_Started
[WebSockets]: https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API
[XMLHttpRequest]: https://xhr.spec.whatwg.org/
[Webpack]: https://webpack.js.org/
[Parcel]: https://parceljs.org/
[Rollup]: https://rollupjs.org/guide/en/
[Gulp]: https://gulpjs.com/
[Speedcurve]: https://www.speedcurve.com/
[Real user monitoring]: https://insidegovuk.blog.gov.uk/2021/06/16/how-real-user-monitoring-will-improve-gov-uk-for-everyone/
[npm-scripts]: https://css-tricks.com/why-npm-scripts/
[Continuous Delivery (CD) and Continuous Integration (CI) workflow]: https://www.gov.uk/service-manual/technology/deploying-software-regularly
[Google PageSpeed]: https://developers.google.com/speed/pagespeed/module/
[set a performance budget]: https://www.gov.uk/service-manual/technology/how-to-test-frontend-performance#set-a-performance-budget
[web.dev - Fast load times]: https://web.dev/fast/
[Setting a performance budget]: https://timkadlec.com/2013/01/setting-a-performance-budget/
[My performance audit workflow]: https://aerotwist.com/blog/my-performance-audit-workflow/
[Front-end performance for web designers and front-end developers]: https://csswizardry.com/2013/01/front-end-performance-for-web-designers-and-front-end-developers/
[Improving web app performance with the Chrome DevTools Timeline and Profiles]: https://addyosmani.com/blog/performance-optimisation-with-timeline-profiles/
[how you can test frontend performance]: https://www.gov.uk/service-manual/technology/how-to-test-frontend-performance
[Google Web Fundamentals: Optimizing Content Efficiency]: https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/
[Brotli]: https://github.com/google/brotli
[HPACK]: https://blog.cloudflare.com/hpack-the-silent-killer-feature-of-http-2/
[QPACK]: https://quicwg.org/base-drafts/draft-ietf-quic-qpack.html
[Cumulative Layout Shift (CLS)]: https://web.dev/cls/
